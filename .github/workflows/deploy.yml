name: Deploy Laravel App (FTPS)

on:
  workflow_dispatch:
  push:
    branches:
      - deploy

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer

      - name: Install FTP tools
        run: sudo apt-get update && sudo apt-get install -y lftp ncftp

      - name: Check if remote directory is empty
        id: check_remote
        run: |
          echo "Checking if remote directory is empty..."
          FILE_COUNT=$(curl --ftp-ssl-control --ftp-pasv --user "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" \
            ftp://${{ secrets.FTP_HOST }}:21/${{ secrets.FTP_DEPLOY_PATH }}/ --list-only | wc -l)

          if [ "$FILE_COUNT" -le 1 ]; then
            echo "remote_is_empty=true" >> $GITHUB_ENV
          else
            echo "remote_is_empty=false" >> $GITHUB_ENV
          fi

      - name: Ensure FTP Deploy Path Exists
        run: |
          echo "Checking or creating FTP deploy path..."
          curl --ftp-ssl-control --ftp-pasv --user "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" \
            --quote "MKD ${{ secrets.FTP_DEPLOY_PATH }}" \
            ftp://${{ secrets.FTP_HOST }}:21 || true

      - name: Detect composer changes
        id: check_composer
        run: |
          if [ $(git rev-list --count HEAD) -gt 1 ]; then
            if git diff --name-only HEAD^ HEAD | grep -E 'composer.json|composer.lock'; then
              echo "composer_changed=true" >> $GITHUB_ENV
            else
              echo "composer_changed=false" >> $GITHUB_ENV
            fi
          else
            echo "composer_changed=false" >> $GITHUB_ENV
          fi

      - name: Install dependencies (if needed)
        if: env.composer_changed == 'true' || env.remote_is_empty == 'true'
        run: |
          echo "Installing composer dependencies..."
          composer install --no-dev --optimize-autoloader

      - name: Upload SQL dump (if generated)
        if: env.migrations_changed == 'true'
        run: |
          echo "Uploading SQL dump: ${{ env.SQL_DUMP_NAME }}"
          curl --ftp-ssl-control --ftp-pasv -T ${{ env.SQL_DUMP_NAME }} \
            --user "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" \
            --connect-timeout 30 \
            --retry 3 \
            --retry-delay 5 \
            ftp://${{ secrets.FTP_HOST }}:21/${{ secrets.FTP_DEPLOY_PATH }}/migrations/${{ env.SQL_DUMP_NAME }}

      - name: Detect changed files
        run: |
          if [ $(git rev-list --count HEAD) -gt 1 ]; then
            echo "Detecting changed files..."
            git diff --name-only HEAD^ HEAD > changed_files.txt
            echo "Files to upload:"
            cat changed_files.txt
          fi

      - name: Upload modified files (if directory is not empty)
        if: env.remote_is_empty == 'false'
        run: |
          if [ $(git rev-list --count HEAD) -gt 1 ]; then
            echo "Uploading modified files..."
            while read file; do
              if [ -f "$file" ]; then
                echo "Uploading: $file"
                curl --ftp-ssl-control --ftp-pasv -T "$file" \
                  --user "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" \
                  --connect-timeout 30 \
                  --retry 3 \
                  --retry-delay 5 \
                  ftp://${{ secrets.FTP_HOST }}:21/${{ secrets.FTP_DEPLOY_PATH }}/"$file"
              fi
            done < changed_files.txt
          fi

      - name: Upload entire project
        run: |
          echo "Uploading project files..."
          lftp -u "${{ secrets.FTP_USERNAME }},${{ secrets.FTP_PASSWORD }}" ${{ secrets.FTP_HOST }} <<EOF
          mirror -R --verbose --parallel=5 \
            --exclude-glob=vendor.zip \
            --exclude-glob=.git \
            --exclude-glob=.git/** \
            --exclude-glob=.github \
            --exclude-glob=.github/** \
            --exclude-glob=Karate \
            --exclude-glob=Karate/** \
            ./ ${{ secrets.FTP_DEPLOY_PATH }}
          bye
          EOF
          echo "Upload completed!"

      - name: Upload vendor folder (only if needed)
        if: env.composer_changed == 'true' || env.remote_is_empty == 'true'
        run: |
          echo "Zipping vendor folder..."
          zip -r vendor.zip vendor/
          echo "Uploading vendor.zip..."
          curl --ftp-ssl-control --ftp-pasv -T vendor.zip \
            --user "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" \
            --connect-timeout 30 \
            --retry 3 \
            --retry-delay 5 \
            ftp://${{ secrets.FTP_HOST }}:21/${{ secrets.FTP_DEPLOY_PATH }}/vendor.zip
